{"version":3,"sources":["scripts/main.js"],"names":["matrix","message","document","querySelector","buttonStart","gameFieldCells","querySelectorAll","infoScore","gameScore","textContent","ROW_LENGTH","PROBILITY_NUMBER","resetGameFieldCells","forEach","cell","className","setButtonStatus","condition","classList","toggle","goStart","add","addRandomCell","goEnd","remove","map","row","emptyCells","rowIndex","cellValue","colIndex","push","col","length","randomIndex","Math","floor","random","randomNumber","randomCell","index","matrixEquals","newMatrix","prevMatrix","upgradeFeilds","collIndex","areMovesAvailable","currentValue","moveLeft","count","result","nonZeroElements","filter","newRow","i","moveRight","unshift","moveUp","transposedResult","Array","from","moveDown","nextRow","addEventListener","contains","click","key"],"mappings":"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","file":"main.756d5289.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet matrix = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst message = [\n  document.querySelector('.message-start'),\n  document.querySelector('.message-win'),\n  document.querySelector('.message-lose'),\n];\nconst buttonStart = document.querySelector('.button');\nconst gameFieldCells = document.querySelectorAll('.field-cell');\nconst infoScore = document.querySelector('.game-score');\nlet gameScore = +(infoScore.textContent);\nconst ROW_LENGTH = 4;\nconst PROBILITY_NUMBER = 0.1;\n\nconst resetGameFieldCells = function() {\n  gameFieldCells.forEach(cell => {\n    cell.textContent = '';\n    cell.className = 'field-cell';\n  });\n};\n\nfunction setButtonStatus(condition) {\n  buttonStart.textContent = condition;\n  buttonStart.classList.toggle('game-start', condition === 'Start');\n  buttonStart.classList.toggle('game-restart', condition === 'Restart');\n}\n\naddRandomCell();\naddRandomCell();\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('game-start')) {\n    goStart();\n  } else {\n    goEnd();\n  }\n});\n\nfunction goStart() {\n  setButtonStatus('Restart');\n  message[0].classList.add('hidden');\n  resetGameFieldCells();\n  addRandomCell();\n  addRandomCell();\n};\n\nfunction goEnd() {\n  setButtonStatus('Start');\n  message[0].classList.remove('hidden');\n  message[2].classList.add('hidden');\n  matrix = matrix.map(row => row.map(() => 0));\n  resetGameFieldCells();\n  gameScore = 0;\n  addRandomCell();\n  addRandomCell();\n};\n\nfunction addRandomCell() {\n  const emptyCells = [];\n\n  matrix.forEach((row, rowIndex) => {\n    row.forEach((cellValue, colIndex) => {\n      if (cellValue === 0) {\n        emptyCells.push({\n          row: rowIndex,\n          col: colIndex,\n        });\n      }\n    });\n  });\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomNumber = Math.random() < PROBILITY_NUMBER ? 4 : 2;\n    const randomCell = emptyCells[randomIndex];\n\n    matrix[randomCell.row][randomCell.col] = randomNumber;\n\n    const index = randomCell.row * 4 + randomCell.col;\n\n    gameFieldCells[index].textContent = `${randomNumber}`;\n    gameFieldCells[index].classList.add(`field-cell--${randomNumber}`);\n  }\n}\n\nfunction matrixEquals(newMatrix, prevMatrix = matrix) {\n  for (let row = 0; row < ROW_LENGTH; row++) {\n    for (let col = 0; col < ROW_LENGTH; col++) {\n      if (newMatrix[row][col] !== prevMatrix[row][col]) {\n        matrix = newMatrix;\n\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction upgradeFeilds() {\n  resetGameFieldCells();\n\n  matrix.forEach((row, rowIndex) => {\n    row.forEach((cellValue, collIndex) => {\n      const index = rowIndex * 4 + collIndex;\n\n      if (cellValue !== 0) {\n        gameFieldCells[index].textContent = `${cellValue}`;\n        gameFieldCells[index].classList.add(`field-cell--${cellValue}`);\n      }\n    });\n  });\n\n  infoScore.textContent = gameScore;\n}\n\ndocument.addEventListener('keydown', click => {\n  if (buttonStart.classList.contains('game-start')) {\n    setButtonStatus('Restart');\n    message[0].classList.add('hidden');\n  }\n\n  if (!areMovesAvailable()) {\n    message[2].classList.remove('hidden');\n    message[0].classList.add('hidden');\n\n    return;\n  }\n\n  switch (click.key) {\n    case 'ArrowLeft':\n      return moveLeft();\n\n    case 'ArrowRight':\n      return moveRight();\n\n    case 'ArrowUp':\n      return moveUp();\n\n    case 'ArrowDown':\n      return moveDown();\n  }\n});\n\nfunction areMovesAvailable() {\n  for (let row = 0; row < ROW_LENGTH; row++) {\n    for (let col = 0; col < ROW_LENGTH; col++) {\n      if (matrix[row][col] === 0) {\n        return true;\n      }\n    }\n  }\n\n  for (let row = 0; row < ROW_LENGTH; row++) {\n    for (let col = 0; col < ROW_LENGTH; col++) {\n      const currentValue = matrix[row][col];\n\n      if (col > 0 && matrix[row][col - 1] === currentValue) {\n        return true;\n      }\n\n      if (col < ROW_LENGTH - 1 && matrix[row][col + 1] === currentValue) {\n        return true;\n      }\n\n      if (row > 0 && matrix[row - 1][col] === currentValue) {\n        return true;\n      }\n\n      if (row < ROW_LENGTH - 1 && matrix[row + 1][col] === currentValue) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveLeft() {\n  let count = 0;\n\n  const result = matrix.map(row => {\n    const nonZeroElements = row.filter(col => col !== 0);\n    const newRow = [];\n\n    for (let i = 0; i < nonZeroElements.length; i++) {\n      if (i < nonZeroElements.length - 1\n        && nonZeroElements[i] === nonZeroElements[i + 1]) {\n        newRow.push(nonZeroElements[i] * 2);\n        count += nonZeroElements[i] * 2;\n        i++;\n      } else {\n        newRow.push(nonZeroElements[i]);\n      }\n    }\n\n    while (newRow.length < ROW_LENGTH) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  });\n\n  if (!matrixEquals(result)) {\n    gameScore += count;\n    matrix = result;\n    upgradeFeilds();\n    addRandomCell();\n  }\n}\n\nfunction moveRight() {\n  let count = 0;\n\n  const result = matrix.map(row => {\n    const nonZeroElements = row.filter(col => col !== 0);\n    const newRow = [];\n\n    for (let i = nonZeroElements.length - 1; i >= 0; i--) {\n      if (i > 0 && nonZeroElements[i] === nonZeroElements[i - 1]) {\n        newRow.unshift(nonZeroElements[i] * 2);\n        count += nonZeroElements[i] * 2;\n        i--;\n      } else {\n        newRow.unshift(nonZeroElements[i]);\n      }\n    }\n\n    while (newRow.length < ROW_LENGTH) {\n      newRow.unshift(0);\n    }\n\n    return newRow;\n  });\n\n  if (!matrixEquals(result)) {\n    gameScore += count;\n    matrix = result;\n    upgradeFeilds();\n    addRandomCell();\n  }\n}\n\nfunction moveUp() {\n  let count = 0;\n\n  const result = [];\n\n  for (let col = 0; col < matrix[0].length; col++) {\n    const nonZeroElements = [];\n\n    for (let row = 0; row < matrix.length; row++) {\n      if (matrix[row][col] !== 0) {\n        nonZeroElements.push(matrix[row][col]);\n      }\n    }\n\n    const newRow = [];\n\n    for (let i = 0; i < nonZeroElements.length; i++) {\n      if (i < nonZeroElements.length - 1\n        && nonZeroElements[i] === nonZeroElements[i + 1]) {\n        newRow.push(nonZeroElements[i] * 2);\n        count += nonZeroElements[i] * 2;\n        i++;\n      } else {\n        newRow.push(nonZeroElements[i]);\n      }\n    }\n\n    while (newRow.length < ROW_LENGTH) {\n      newRow.push(0);\n    }\n\n    result.push(newRow);\n  }\n\n  const transposedResult = Array.from({ length: ROW_LENGTH }, () => []);\n\n  for (let row = 0; row < ROW_LENGTH; row++) {\n    for (let col = 0; col < ROW_LENGTH; col++) {\n      transposedResult[row].push(result[col][row]);\n    }\n  }\n\n  if (!matrixEquals(transposedResult)) {\n    gameScore += count;\n    matrix = transposedResult;\n    upgradeFeilds();\n    addRandomCell();\n  }\n}\n\nfunction moveDown() {\n  let count = 0;\n\n  const result = matrix.map(row => [...row]);\n\n  for (let col = 0; col < result[0].length; col++) {\n    for (let row = result.length - 2; row >= 0; row--) {\n      if (result[row][col] !== 0) {\n        for (let nextRow = row + 1; nextRow < result.length; nextRow++) {\n          if (result[nextRow][col] === 0) {\n            result[nextRow][col] = result[nextRow - 1][col];\n            result[nextRow - 1][col] = 0;\n          } else if (result[nextRow][col] === result[nextRow - 1][col]) {\n            result[nextRow][col] *= 2;\n            count += result[nextRow][col];\n            result[nextRow - 1][col] = 0;\n            break;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  if (!matrixEquals(result)) {\n    gameScore += count;\n    matrix = result;\n    upgradeFeilds();\n    addRandomCell();\n  }\n}\n"]}